# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Configurable locations of dependencies of this project.

# One helper macro used in set_common_build_variables()
# macro(append_flags)
#   append ${new_flags} into cur_flags IF flags are not inside cur_flags
macro(append_flags cur_flags  new_flags)
  if(NOT "${new_flags}" STREQUAL "")
    string(FIND "${${cur_flags}}" "${new_flags}" position)
    if(${position} EQUAL -1)
      set(${cur_flags} "${${cur_flags}} ${new_flags}")
    endif()
  endif()
endmacro(append_flags)

# Must be outside of the function, otherwise the current list dir will be
# directory of the calling file.
set(dir_of_this_file ${CMAKE_CURRENT_LIST_DIR})

# Sets and caches `var` to the first path in 'paths' that exists.
# If none of the paths are found, sets `var` to an error value of
# "path_not_found".
function(set_to_first_path_that_exists var paths description)
  foreach(path ${paths})
    if(EXISTS "${path}")
      set(${var} "${path}" CACHE PATH description)
      return()
    endif()
  endforeach(path)
  set(${var} "path_not_found_to_${var}" CACHE PATH description)
endfunction(set_to_first_path_that_exists)

# set_common_build_variables()  set up variables of
#    third_party_root
#    fpl_root
#    fpl and third party dependency module path
#    CMAKE_C_FLAGS
#    CMAKE_CXX_FLAGS
#    CMAKE_COMPILER_IS_CLANGXX
# Input Args:
#   msvc_extra:      extra compiler flags for MSVC build
#   gnu/clang_extra: extra compiler flags for gnu/clang toolchain
# Usage Example:
#   set_common_build_variables("/W0" "-Wno-unused-parameter")
#       if using MSVC, /W0 will be added to CMAKE_C/CXX_FLAGS
#       if using others, -Wno-used-parameters is added to
#                        CMAKE_C/CXX_FLAGS
function(set_common_build_variables)
  # If we clone from GitHub, the dependencies will be cloned (via submodules)
  # into a "dependencies" directory.
  get_filename_component(github_dir
                         "${CMAKE_CURRENT_SOURCE_DIR}/dependencies" REALPATH)

  # Internally, there are a couple places where we might store our dependencies.
  # For convenience, we hard-code them here so that we don't have to type,
  #    -Ddependencies_root=my_directory_name
  # on the cmake command-line every time.
  get_filename_component(fplutil_parent_dir
                         "${dir_of_this_file}/../../" REALPATH)
  get_filename_component(libs_dir
                         "${fplutil_parent_dir}/../libs" REALPATH)
  get_filename_component(piper_dir
                         "${fplutil_parent_dir}/../third_party" REALPATH)
  get_filename_component(external_dir
                         "${dir_of_this_file}/../../../../../external" REALPATH)

  # Set and cache fpl_root.
  # This is the directory where the FPL projects are kept.
  if(NOT DEFINED fpl_root)
    set_to_first_path_that_exists(fpl_root
        "${dependencies_root};${github_dir};${libs_dir};${piper_dir};${fplutil_parent_dir}"
        "Directory containing FPL projects.")
  endif()

  # Set and cache third_party_root.
  # This is the directory where non-FPL projects are kept.
  if(NOT DEFINED third_party_root)
    set_to_first_path_that_exists(third_party_root
        "${dependencies_root};${github_dir};${piper_dir};${external_dir};${fpl_root}"
        "Directory containing non-FPL projects.")
  endif()

  # fpl common module directory variables
  set(dependencies_breadboard_dir "${fpl_root}/breadboard"
      CACHE PATH "Directory containing the breadboard library.")
  set(dependencies_module_library_dir
      "${dependencies_breadboard_dir}/module_library" CACHE PATH
      "Directory containing the breadboard module library.")
  set(dependencies_corgi_dir "${fpl_root}/corgi" CACHE PATH
      "Directory containing the CORGI library.")
  set(dependencies_corgi_component_library_dir
      "${dependencies_corgi_dir}/component_library" CACHE PATH
      "Directory containing the CORGI component library")
  set(dependencies_flatbuffers_dir "${fpl_root}/flatbuffers"
      CACHE PATH "Directory containing the Flatbuffers library.")
  set(dependencies_flatbuffers_cmake_dir "${fpl_root}/flatbuffers/CMake"
      CACHE PATH "Directory containing the Flatbuffers library cmake helpers.")
  set(dependencies_flatui_dir "${fpl_root}/flatui"
      CACHE PATH "Directory containing the FlatUI library.")
  set(dependencies_fplbase_dir "${fpl_root}/fplbase"
      CACHE PATH "Directory containing the FPLBase library.")
  set(dependencies_fplutil_dir "${fpl_root}/fplutil"
      CACHE PATH "Directory containing the fplutil library.")
  set(dependencies_libfplutil_dir "${fpl_root}/fplutil/libfplutil"
      CACHE PATH "Directory containing the libfplutil library.")
  set(dependencies_mathfu_dir "${fpl_root}/mathfu"
      CACHE PATH "Directory containing the MathFu library.")
  set(dependencies_motive_dir "${fpl_root}/motive"
      CACHE PATH "Directory containing the motive animation library.")
  set(dependencies_pindrop_dir "${fpl_root}/pindrop" CACHE PATH
      "Directory containing the pindrop library.")
  set(dependencies_scene_lab_dir "${fpl_root}/scene_lab"
      CACHE PATH "Directory containing the Scene Lab library.")

  # third party module directory variables
  set(dependencies_bulletphysics_distr_dir "${third_party_root}/bulletphysics"
      CACHE PATH "Directory containing the Bullet Physics distribution.")
  set(dependencies_harfbuzz_distr_dir "${third_party_root}/harfbuzz"
      CACHE PATH "Directory containing the harfbuzz library.")
  set(dependencies_libogg_distr_dir "${third_party_root}/libogg"
      CACHE PATH "Directory containing the libogg library.")
  set(dependencies_libunibreak_distr_dir "${third_party_root}/libunibreak"
      CACHE PATH "Directory containing the libunibreak library.")
  set(dependencies_libvorbis_distr_dir "${third_party_root}/libvorbis"
      CACHE PATH "Directory containing the libvorbis library.")
  set(dependencies_sdl_mixer_distr_dir "${third_party_root}/sdl_mixer"
      CACHE PATH "Directory containing the SDL Mixer library.")
  set(dependencies_vectorial_dir "${third_party_root}/vectorial"
      CACHE PATH "Directory containing the Vectorial library.")

  # Depending on googletest version, the gtest directory may be nested under
  # googletest/googletest.
  set_to_first_path_that_exists(dependencies_gtest_dir
      "${third_party_root}/googletest/googletest;${fpl_root}/googletest/googletest;${fpl_root}/googletest;${third_party_root}/gtest"
      "Directory containing the GoogleTest library.")

  set_to_first_path_that_exists(dependencies_gmock_dir
      "${third_party_root}/googletest/googlemock;${third_party_root}/gmock"
      "Directory containing the GoogleTest library.")

  # Likewise, other projects may have slightly different names depending
  # on where they're sourced from.
  set_to_first_path_that_exists(dependencies_freetype_distr_dir
      "${third_party_root}/freetype2/freetype-2.6.1;${third_party_root}/freetype"
      "Directory containing the freetype library.")

  set_to_first_path_that_exists(dependencies_gumbo_distr_dir
      "${third_party_root}/gumbo-parser;${third_party_root}/gumbo"
      "Directory containing the gumbo library.")

  set_to_first_path_that_exists(dependencies_sdl_dir
      "${third_party_root}/SDL2;${third_party_root}/sdl"
      "Directory containing the SDL library.")

  set_to_first_path_that_exists(dependencies_stb_dir
      "${third_party_root}/stb;${third_party_root}/stblib"
      "Directory containing the STB library.")

  set_to_first_path_that_exists(dependencies_webp_distr_dir
      "${third_party_root}/webp;${third_party_root}/libwebp/v0_2/"
      "Directory containing the Webp distribution.")

  # Set up compiler flags
  # Detect clang
  if(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
    set(using_clangxx 1)
    set(CMAKE_COMPILER_IS_CLANGXX 1 PARENT_SCOPE)
  endif()

  set(C_FLAGS_WARNINGS "")
  if(MSVC)
    #    C4065: switch statement contains 'default' but no 'case' labels
    #    C4127: conditional expression is constant
    #    C4355: 'this' used in base member initializer list
    #    C4577: 'noexcept' used with no exception handling mode specified.
    #    C4201: nonstandard extension used: nameless struct/union
    set(C_FLAGS_WARNINGS "/W4 /WX /wd4065 /wd4127 /wd4355 /wd4577 /wd4201")
    if((${ARGC} GREATER 0) AND (NOT "${ARGV0}" STREQUAL ""))
      set(C_FLAGS_WARNINGS "${C_FLAGS_WARNINGS} ${ARGV0}")
    endif()
    set(CMAKE_CXX_FLAGS "/MP")
    add_definitions(-DNOMINMAX -D_HAS_EXCEPTIONS=0 -D_CRT_SECURE_NO_WARNINGS)
  elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR using_clangxx)
    add_definitions(-g)
    append_flags(CMAKE_CXX_FLAGS
            "-std=c++0x -Wall -pedantic -Werror -Wextra -Wno-unused-function")
    if(${ARGC} GREATER 1)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${ARGV1}")
    endif()
  endif()

  append_flags(CMAKE_C_FLAGS "${C_FLAGS_WARNINGS}")
  append_flags(CMAKE_CXX_FLAGS "${C_FLAGS_WARNINGS}")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}" PARENT_SCOPE)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" PARENT_SCOPE)

  set(CMAKE_CXX_FLAGS_DEFAULT "${CMAKE_CXX_FLAGS}" PARENT_SCOPE)
  set(CMAKE_C_FLAGS_DEFAULT "${CMAKE_C_FLAGS}" PARENT_SCOPE)
endfunction(set_common_build_variables)

# External code should be compiled with these compiler options.
# Call this function before add_subdirectory([external project]), and then
# call restore_comiler_flags() after.
function(set_compiler_flags_for_external_libraries)
  # Save current compiler flags so that we can restore them in
  # restore_compiler_flags()
  set(SAVED_CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" PARENT_SCOPE)
  set(SAVED_CMAKE_C_FLAGS "${CMAKE_C_FLAGS}" PARENT_SCOPE)

  # Detect clang
  if(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
    set(using_clangxx 1)
  endif()

  # Suppress all warnings.
  if( CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR
      using_clangxx OR APPLE )
    set(CMAKE_CXX_FLAGS "-std=c++0x -w -Wno-deprecated-declarations" PARENT_SCOPE)
    set(CMAKE_C_FLAGS "-w" PARENT_SCOPE)
  elseif(MSVC)
    set(CMAKE_CXX_FLAGS "/W0 /MP" PARENT_SCOPE)
   set(CMAKE_C_FLAGS "/W0 /MP" PARENT_SCOPE)
    add_definitions(-DNOMINMAX -D_HAS_EXCEPTIONS=0 -D_CRT_SECURE_NO_WARNINGS)
  endif()
endfunction(set_compiler_flags_for_external_libraries)

# Restore the compiler flags to the values they had before
# set_compiler_flags_for_external_libraries() was called.
function(restore_compiler_flags)
  set(CMAKE_CXX_FLAGS "${SAVED_CMAKE_CXX_FLAGS}" PARENT_SCOPE)
  set(CMAKE_C_FLAGS "${SAVED_CMAKE_C_FLAGS}" PARENT_SCOPE)
endfunction()

